![스크린샷 2022-07-12 오후 5.09.07.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3f978c72-4ace-4d4c-a8fd-292c1d936d59/스크린샷_2022-07-12_오후_5.09.07.png)

---

### 플러터 강좌에 앞서 아래의 두가지를 살펴보는 시간

- 왜 이 시점에서 플러터에 관심을 갖어야하고
- 왜 구글은 앞으로 플러터와 관련해서 어떤 행보를 보일지.

---

---

![스크린샷 2022-07-12 오후 5.16.27.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e37f3434-b387-48b5-baef-db4425c2926c/스크린샷_2022-07-12_오후_5.16.27.png)

---

### 플러터를 이해하려면 구글의 비밀 프로젝트인 Fuchsia OS 프로젝트를 살펴보면 좋음

- Fuchsia는 꽃의 이름이며, 꽃말은 좋아함, 열열한 맘.
- 구글은 이미 시장을 지배하는 두 개의 걸출한 OS를 가지고 있음.
    - Android OS.
    - Chorme OS.

---

---

![스크린샷 2022-07-12 오후 5.16.56.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f5c0cff8-eb52-4a53-9dd2-b37dbda59622/스크린샷_2022-07-12_오후_5.16.56.png)

---

### 그렇다면 왜 구글은 이 시점에서 새로운 OS를 준비하는 것일까?

---

---

![스크린샷 2022-07-12 오후 5.24.31.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/509eb219-2e76-4a67-b54a-7b8230b2a8e1/스크린샷_2022-07-12_오후_5.24.31.png)

---

### Fuchsia의 흔적들을 먼저 살펴보자

- 2016년 8월, 어떤 정보,공식 발표도 없이 깃허브에 코드가 게시.
- 당시 이름은 마젠타였음. Zircon(지르콘)이라는 마이크로 커널을 기반으로 하고 있음.
- 2017년 11월 swift 지원계획이 밝혀짐.
- 2018년 1월 픽셀북을 공식 Fuchsia 테스트 디바이스로 추가.
- 2019년 1월 안드로이드앱 구동 가능성.
- 2019년 5월 구글 I/O에서 Fuchsia가 언급됨.
- 2019년 7월 1일 Fuchsia 홈페이지 오픈

---

---

![스크린샷 2022-07-12 오후 7.19.09.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f1868a4b-185f-4e94-93db-076394946fd5/스크린샷_2022-07-12_오후_7.19.09.png)

---

## OS(운영체계)에서 핵심적인 역할을 하는 부분
= OS 구동 시 중간에서 하드웨어와 소프트웨어를 연결시켜주는 역할

### 이시간에는 구글 관련해서 두 종류만 언급하겠음.

- 마이크로 커널 (Micro kernel)
    - 지르콘인 Fuchsia에서 사용 되고 있고 구글에서 개발했다.
- 단일형 커널 (Monolithic kernel)
    - Adroid에서 사용되고 있고 Open Source인 Linux kenel이다.
      즉, 능력만 된다면 누구나 수정이 가능다는 의미이다.

---

---

### 두 커널의 구조를 간단하게 살펴보면

![스크린샷 2022-07-12 오후 7.21.56.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/429ddd06-5ded-4c7d-82a1-97da986f665b/스크린샷_2022-07-12_오후_7.21.56.png)

---

- Micro kernel(Zircon kernel)
    - 마이크로 커널은 그 이름대로 커널에 최소한의 필수적인 기능만을 집어 넣은 것.
    - 그 외에 기능들은 모듈화 시켜서 조립식으로 사용하는 커널.

---

![스크린샷 2022-07-12 오후 7.24.20.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4e121619-e680-40e6-ae41-08964181b0d7/스크린샷_2022-07-12_오후_7.24.20.png)

---

- 단일형 커널(Monolithic kernel)
    - 단일한 커널은 커널에 필요한 모든 기능들을 커널의 한 곳에 모아둔 것.
    - 단일한 커널의 단점 : 이 모든 기능들이 커널이 한곳에 모여서 서로 얽혀 있기 때문에 업데이트나 수정을 하려면 시간과 노력이 많이 필요하다는 것.
    - 이는 나름 Android 파패너(?) 큰 이유이기도 합니다. (무슨 말이지..)

---

---

![스크린샷 2022-07-12 오후 7.31.57.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/80682ca4-3a3c-4606-abd2-821dc9e8ec7a/스크린샷_2022-07-12_오후_7.31.57.png)

---

### 그럼 다시 본론으로 돌아가서 구체적으로 구글은 왜 피셔 os 를 만들려고 하는 것일까요?

- 그 첫 번째와 두 번째 이유를 구글이 발표했던 Fuchsia operating system 문서에서 발견을 할 수 있음.
    1. 지리콘은 임베디드 응용프로그램에서 일반적으로 사용되는 소형 시스템용으로 설계된 Little Kernel의 파생물.
    2. 지르콘은 현대적 전화기와 고속이 프로세스를 갖춘 개인용 컴퓨터를 타깃으로 하고 있다.

- 이 두 가지 정의는 상당히 큰 의미를 내포하고 있다.
    1. 1번째 정의는 Fuchsia OS가 사물인터넷 등을 위한 소형 디바이스를 타깃으로 하고 있다는 것.
    2. 2번째 정의는 Fuchsia OS를 소형 디바이스 뿐만 아니라 노트북, 데스크탑, 스마트폰 등의 기기에서도 구동될 수 있도록 하겠다는 의미.

---

![스크린샷 2022-07-12 오후 7.32.09.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8d506ba3-faba-4ba0-8b26-d1a32ff58879/스크린샷_2022-07-12_오후_7.32.09.png)

---

### 이는 Fuchsia OS를 모든 기기에서 보편적으로 구동되는 OS로 만들겠다는 구글의 야심이 간접적으로 드러났다고 보아야 할 것

---

![스크린샷 2022-07-12 오후 7.34.25.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a6bbe64e-8313-4bda-8aa4-9986397b64e3/스크린샷_2022-07-12_오후_7.34.25.png)

---

### 세번째 이유는 바로 음성 명령

- 향후 ai 스피커와 사물인터넷 기기 등 디스플레이가 없는 기기들이 상당히 늘어날 것.
- 이런 기기들을 제어하는데 음성 명령은 가위 필수적인 기능 이라고 할 수 있다.
- 하지만 Android는 개발된 지 10년 정도가 지난 OS 입니다
    - 현재의 ai 스피커와 사물인터넷 환경과는 달리 Android 는 터치 디스플레이에 최적화가 되어 있다.
    - 구글은 아마도 Android를 가지고서는 터치 디스플레이가 없는 기기들을 제어하는 데 있어서 최적화가 힘들다고 판단했을 가능성이 높다.
- 반면에 Fuchsia OS는 모듈 단에서부터 별도의 과정 없이 동작할 수 있도록 설계에서 어떠한 환경에서도 즉각적으로 음성 명령을 수행할 수 있도록 설계 되었다.

---

![스크린샷 2022-07-12 오후 7.42.45.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5359aa54-4701-44c6-8e49-84d8db64f315/스크린샷_2022-07-12_오후_7.42.45.png)

---

### 4번째 이유는 Android 에 파편화

- 최근에 구글은 트래블이란 정책을 사용하고 있음.
- 트래블이란 스마트폰 제조사들이 소프트웨어에 큰 변화를 주지 않고도 보다 빠르고 쉽게 새로운 Android OS 의 업데이트를 배포할 수 있도록 도와주는 정책.
- 그래서 예전보다는 사정이 좀 나아지고 있지만 iOS에 비한다면 여전히 형편없는 업데이트 속도를 보여주고 있고 무엇보다 업데이트의 주도권을 구글이 쥐고 있는 것이 아니라 제조사들이 쥐고 있는 상태
    - 제 아무리 구글이 필요에 따라서 발 빠른 업데이트를 진행한다고 해도 스마트폰 제조사들이 반영해 주지 않으면 아무런 의미가 없다는 것.
- 반면 Fuchsia는 사물인터넷 기기들을 지원하기 때문에 보안 문제 상 항상 최신 업데이트를 제공할 가능성이 아주 크며 주도권 역시 구글이 쥘 수 있다.

---

![스크린샷 2022-07-12 오후 7.44.46.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c7f1ef87-3c18-40e1-b2eb-37b84d1925aa/스크린샷_2022-07-12_오후_7.44.46.png)

---

### 마지막으로 오라클과 이 자바 특허 전쟁

- 아직 완전히 끝났다고 볼 수는 없지만 작년 법원의 판결로 구글은 거의 10조 원에 가까운 라이선스 비용을 지불해야 할 상황에 처해 있다.
- 결국 구글이 Android OS 를 사용하는 한 결코 잡아 에서 벗어날 수 없으며 이는 두고두고 구글을 괴롭힐 가능성이 큽니다

---

---

![스크린샷 2022-07-12 오후 8.27.32.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3c7bc562-de17-4133-807a-726741d189f6/스크린샷_2022-07-12_오후_8.27.32.png)

### 지금까지 구글이 왜 잘나가고 있는 Android 와 Chorme OS 를 두고
새로운 OS 개발을 위해서 노력하고 있는지 간단히 살펴보았다.
이젠 우리가 학습할 flutter 에 대한 간략한 소개와
Fuchsia OS 와의 연관성에 대해서 살펴보겠다.

---

![스크린샷 2022-07-12 오후 8.30.45.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e8ba7879-f5fd-4005-a9bf-e68cd62ce409/스크린샷_2022-07-12_오후_8.30.45.png)

![스크린샷 2022-07-12 오후 8.30.58.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/919583d1-3f67-493d-b3fc-e24b38bf0dfa/스크린샷_2022-07-12_오후_8.30.58.png)

---

1. 종종 플러터를 프로그래밍 언어라고 착각하시는 분들이 있는데 1번째 플라톤은 프레임워크 입니다
    - 자동차 만드는 공장을 생각해 보시기 바랍니다

      무선 자동차의 틀 즉 프레임워크를 준비하고 정해진 위치에 정해진 부속품들은 조립해서 자동차를 완성한다. 이런 규칙이 존재하면 보다 쉽고 빠르게 자동차를 만들 수 있다. 플루터은 이렇게 예슬 만들기 위한 정확한 규칙이 제공되는 틀이 라고 이해하면 된다.



---

![스크린샷 2022-07-12 오후 8.33.03.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/65dd024e-fee5-46a1-981a-e67fac5b45ab/스크린샷_2022-07-12_오후_8.33.03.png)

---

1. 플라톤은 피쉬 OS 의 사용자 인터페이스 및 케이블 만들 때 사용
    - 즉 플루터로 만든 Android 앱은 어떠한 수정도 필요 없이 그대로 Fuchsia 에서 완벽하게 작동한다 는 의미.
    - 만약 구글이 바램대로 Fuchsia가 모든 기기를 아우르는 OS 가 된다면 우리는 flutter 로 단지 스마트폰용 앱이 아닌 다양한 기기에서 작동되는 앱을 만들 수도 있다는 의미가 됩니다


---

![스크린샷 2022-07-12 오후 8.35.24.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3193ad2e-26c7-4daf-b4ac-0ef792ad3fbb/스크린샷_2022-07-12_오후_8.35.24.png)

---

1. Flutter 프레임워크에서 앱을 만들때 필요한 프로그래밍 언어는 답이라는 것이다.
    - 가령 Android 앱을 만들 때 Java란 언어를 사용하듯, Flutter 앱을 만들 때는 Dart란 언어를 사용


---

![스크린샷 2022-07-12 오후 8.37.18.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2f0e294e-17f4-4ccc-aaaa-47cfe15aee96/스크린샷_2022-07-12_오후_8.37.18.png)

---

1. Flutter는 한 번에 코딩으로 Android 앱과 iOS 앱을 동시에 개발할 수 있는 크로스 플랫폼
    - 물론 React Native 라는 크로스 플랫폼이 이미 존재하고 있지만 Flutter는 React Native와는 다른 방식과 장점들로 앱을 만들 수 있다.

---

![스크린샷 2022-07-12 오후 8.37.42.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3214f004-4738-4db5-8c47-b403507efe95/스크린샷_2022-07-12_오후_8.37.42.png)

---

1. Flutter는 인터페이스나 사용자 경험을 하나로 통일할 수 있다.
    - 보통 Native 앱을 개발할 때, 각 OS 에 맞추어서 인터페이스가 재구성 되기 때문에 OS 마다 서로 조금씩 다른 인터페이스나 사용자 경험을 제공하게 된다.
    - 하지만 Flutter는 자체적으로 인터페이스를 렌더링 하기 때문에 인터페이스에 있어서 Android 이건 iOS 이건 같은 사용자 경험을 제공할 수 있다.
    - 참고로 아래 이미지는 VisualCode라는 Tool로 제작한 간단한 로그인 앱
        - 말씀드렸듯 한 번에 코딩으로 두 종류의 앱을 만들 수 있도록 좌측 상단에 Android 와 iOS 폴더가 생성된 것을 볼 수 있다.

![스크린샷 2022-07-12 오후 8.43.21.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/793f67e0-b0bc-4026-92c8-62686309b26b/스크린샷_2022-07-12_오후_8.43.21.png)

![스크린샷 2022-07-12 오후 8.43.31.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c1ffd165-1ea9-4991-9c46-7a431d439389/스크린샷_2022-07-12_오후_8.43.31.png)

---

![스크린샷 2022-07-12 오후 8.47.06.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/80e5b79f-deef-4bdf-bd0c-3211b48a477f/스크린샷_2022-07-12_오후_8.47.06.png)

---

1. Flutter는 현재 Hummingbird 라는 프로젝트도 본궤도에 올려 놓고 있다.
    - 즉 플라톤의 앱을 만들 때와 거의 똑같이 코딩을 해서 Android, iOS 뿐만 아니라 Web-App 까지도 만들 수 있다는 의미.
    - 앱을 만들 때와 다른 점이라고 는 프로젝트 생성 시 Flutter 외부로 지정해서 만들어야 한다는 것 정도.
        - 다만 이 Hummingbird 프로젝트는 현재 매우 초기 단계여서 브라우저도 Chorme 만 지원하고 있는 상태이고 그 외 기능이나 속도 면에서 아직 많이 부족한 상황.
        - 하지만 현재까지의 구글 행보로 볼 때 이 또한 빠른 속도로 개선될 것이며 보다 다양하고 통과하는 기능들을 곧 적용할 수 있을 것으로 보여짐.
    - 참고로 아래 이미지는 플라톤 프로젝트를 실행해 본 모습
        - Chorme 상에서 개발자 도구를 사용해서 반응형 웹이 잘 작동하나 테스트를 해본 상황입니다 앞으로 강좌를 진행하면서 틈틈이 Flutter Web도 다루어 보도록 하겠다.

          ![스크린샷 2022-07-12 오후 8.47.10.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c66ccdab-b4c9-44a9-b30c-f92d48252e70/스크린샷_2022-07-12_오후_8.47.10.png)


---

---

### 그럼 구글은 왜 Flutter를 강력하게 지원하고 있고
Fuchsia OS 라는 이슈를 자꾸만 노출시키는 걸까요?

![스크린샷 2022-07-12 오후 8.52.50.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d1472250-527d-4af8-9620-40c243e4ce62/스크린샷_2022-07-12_오후_8.52.50.png)

---

- 현재 우리가 Flutter라는 프레임워크를 사용해서 App을 만든다면 우리는 한 번에 코딩으로 Android와 iOS 을 동시에 만들수 있다.
- 그리고 그 외 다양한 장점들로 인해서 앞으로 Flutter를 사용하는 개발자들이 점점 더 늘어날 것.
- 코딩셰프는 구글이 바라는 것이 바로 이 점 이라고 생각
    - 개발자들이 Flutter로 App을 만들면 만들수록 결국 Fuchsia OS 를 위한 생태계가 점점 더 커지고 완벽해 진다는 것.

---

![스크린샷 2022-07-12 오후 8.56.51.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0febffe6-a948-4f4d-aef2-fc2b190ebf1e/스크린샷_2022-07-12_오후_8.56.51.png)

---

매년 학습하기 에 최악의 프로그래밍 언어의 순위를 발표

- 작년에 구글의 달튼은 20 개의 프로그래밍 언어 중에서 학습하지 말아야 할 번호 일 위로 뽑혔습니다 심지어 한 개발자는 달튼은 죽었다 라고 까지 단언을 했었다.
- 하지만 올해에는 그 상황이 급반전 였습니다 심지어 발전 가능성 및 트렌드 지표에서는 최우선으로 선정이 되었고 작년에 비해 전체 순위는 무려 13 계단이나 내려왔다.
- 이 모든 것이 구글의 Flutter 관련 정책 발표와 Flutter 프레임워크의 가능성과 연관이 있다.
    - 물론 여전히 구인 시장 지표에서는 최악의 언어로 선정됐지만 이는 Flutter 프레임워크가 발표된 지 얼마되지 않았다는 것에서 기인하는 바가 크다.

---

![스크린샷 2022-07-12 오후 8.58.48.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7f672685-e5f0-4889-bf3e-59b1700f66ad/스크린샷_2022-07-12_오후_8.58.48.png)

---

### 아마도 Fuchsia OS 와 Flutter는 지금까지 구글이 해결하지 못한 문제점들에 대한
나름의 해결책이 라고 생각

- 개발자로서 우리는 Flutter를 학습하지 만 결국 가장 중요한 것은 과연 Flutter라는 프레임워크가 우리의 커리어에 도움이 될 수 있을까? 라는 반문일 것이다.
- 적어도 지금 당장은 아니겠지만 조만간 Flutter 프레임워크가 개발자라면 당연히 학습해야 할 분야로 자리매김하기를 바라고 또 그렇게 열 수 있을 거라는 조심스러운 의견을 말씀드리며 오늘 내용은 마무리할까 한다.

---

![스크린샷 2022-07-12 오후 9.00.14.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d44dd431-6e5b-4f85-ad19-9c96d02cb66d/스크린샷_2022-07-12_오후_9.00.14.png)

---

### 코딩 셰프의 강좌는 난이도별로 순한맛, 조금 매운맛,  매운맛 이렇게 세 가지로 준비될 예정

- 보다 자세한 내용은 코딩 캠프 채널 소개 영상을 참고하시기 바랍니다
- 그럼 1번째 시간은 이것으로 마치고 다음 시간부터는 본격적인 plot 어 이야기로 찾아뵙도록 하겠습니다
  감사합니다

---

---