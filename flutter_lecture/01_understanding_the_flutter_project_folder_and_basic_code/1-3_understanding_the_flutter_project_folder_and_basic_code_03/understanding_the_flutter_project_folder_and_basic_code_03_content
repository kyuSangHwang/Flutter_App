### 지난 시간

- 우리는 MarterialApp Widget 내에서 home이라는 argument에 MyHomePage라는 Custom Widget을 지정해 주었고
- 역시나 이번에도 MyHomePage 라는 Custom Widget은 따로 존재하지 않기에 MyApp Widget 밖으로 나와서 MyHomePage라는 Custom Widget을 만들어 보겠습니다.
- 방법은 지난 시간에 했던 MyApp Widget을 만드는 것과 똑같습니다.
- 그런데 우선 Custom Widget를 만들 때에는 항상 Stateless Widget으로 만들지 Stateful Widget으로 만들지를 먼저 고민해 보셔야 합니다.
- 가령 MyHomePage Widget 내에 무언가 데이터를 받거나 체크박스나 라디오 버튼처럼 터치했을 때 모양이 변하는 요소가 하나라도 있다면 Stateful Widget 으로 지정을 해 주셔야 합니다.

---

### 이번 시간

- 간단한 문자들 만 출력되는 앱을 만들 예정이니 stl 라고 입력하시고 제일 상단에 Flutter Stateless Widgetdmf 선택해 줍니다.
- 그리고 MyHomePage를 더블 클릭하셔서 command c 로 복사를 하신 후에 클래스 뒤에 command v 에서 붙여넣기를 합니다.
- 그러면 빨간 줄이 없어지면서 Stateless custom widget이 완성 됩니다.
- 말씀드렸듯 모든 Custom Widget 또 다른 Widget을 return하는 Bulid 함수를 가지고 있고 이번에도 기본적으로 Container Widget을 reurn 하고 있습니다.

---

### Scaffold Widget

- 우리는 이제부터 본격적으로 App 화면에 보여질 App Page를 디자인해야 하기 때문에 container widget을 더블클릭해서 지정을 해 주신 후에 sca 라고 입력하시면 제일 상단에 Scaffold 라는 Widget를 볼 수 있습니다.
- Scaffold는 사전을 보면 교수대, 처형대  혹은 비계를 설치하다 이런 뜻부터 보이는데 사실 Scaffold는 훨씬 더 좋은 의미로도 쓰입니다. 주로 교육학에서 쓰이는 의미인데 무언가를 혼자 해낼 수 있도록 발판을 만들어주다 라는 의미도 있습니다.
- Flutter에서도 Scaffold Widget에서는 App 화면에 다양한 요소들을 배치하고 그릴 수 있도록 도와주는 빈 도화지 같은 역할을 합니다.
- 만약 이 Scaffold Widget 없으면 그 어떠한 요소들도 앱 화면에 배치할 수 없습니다.
- Scaffold Widget은 정말 중요한 만큼 이름과 그 역할을 잘 매칭시켜 기억하시기 바랍니다.

---

### Sacaffold Widget 내부에서 여러가지 다양한 요소들을 추가해서 App Page를 구성

- 일반적인 App 떠올려 보시면 제일 상단에 AppBar가 있습니다
당연히 Sacaffold Widget도 이 AppBar를 만들기 위한 argument를 가지고 있습니다
- 한 줄 밑으로 내려 오셔서 ap 이라고 입력하시면 AppBar 이 먼트를 찾을 수 있습니다 선택해 줍니다
그리고 한 번 더 ap 라고 입력을 하시면 AppBar 불러올 수 있습니다 선택됩니다
- 이제부터는 AppBar Widget 내에서 AppBar 만을 위한 모든 디자인과 기능들을 구성할 수 있습니다
하지만 이번 시간에는 간단하게 AppBar 에 표시될 AppBar Ttile을 만들어 보겠습니다
- AppBar widget 에서 한 줄 밑으로 내려 오시구요 ti 라고 입력하시면 tiltle Argument를 찾을 수 있습니다
그리고 한 번 더 te 이라고 입력하시면 Text Widget불러올 수 있습니다
- Text Widget은 Text와 관련된 다양한 디자인적 argument를 가지는 Widget 있습니다
- 이제 작은 따옴표를 먼저 입력하신 후에 작은따옴표 내에 원하시는 단어나 문장을 입력하시면 됩니다
따옴 표는 설명드렸듯이 큰 다음 표나 작은따옴표 둘 중에 편 하 것신 것을 사용하기면 됩니다
저는 역시나 ‘First App’이라고 입력하겠습니다
- 어쩌면 이 부분에서 궁금증이 조금 생기실 수도 있을 것 같습니다
    - 지난 시간에 Material 내에서 title을 만들 때는 Text Widget을 따로 불러 오지 않고 곧바로 작은 따옴표 를 입력해서 문자를 입력해 썼죠
    - 그런데 AppBar Widget 내에서는 Text Widger을 따로 불러왔습니다.
    - 이 둘의 차이는 MaterialApp 내에 w은 title은 말 그대로 App 총칭하는 이름입니다
    - 가령 스마트폰 상에서 최근 사용한 App의 list를 보여줄 때는 MaterialApp에서 설정한 Title이 보여집니다
    - 반면에 Appbar 내에 title은 말 그대로 App화면 AppBar에 하면 출력되는 타이틀 입니다

---

### AppBar가 구현된 우리의 첫 번째 App

- AppBar를 만들었고 지금부터는 직접 눈으로 코딩에 결과를 확인할 수 있으니 Emulator를 실행시켜 놓고 코딩을 진행하겠습니다.
- 이제 본격적으로 AppBar 밑으로 Body에 해당하는 부분들을 만들어 보겠습니다
    - AppBar Widget 밖으로 나오셔서 bo 라고 입력을 하시면 제일 상단에서 Body Widget을 찾을 수 있습니다
    - 그리고 이 Body Widget 위에 마우스를 올려 보시면 The primary content of the scaffold 라는 설명이 나옵니다
    - 본격적으로 App 화면을 만드는 시작점인만큼 Scaffold에서 가장 중요한 요소라는 의미다
- 이제 우리는 화면에 모든 요소들을 정 중앙에 배치할 예정이니 center 이제 것이라는 것을 불러오겠습니다.
    - Body 뒤에서 cen 이라고 입력하시면 제일 상단에서 Center WIdget을 찾을 수 있습니다
    - 그리고 이 Center Widget은 자신만의 몇 개의 Child 즉 자식 Widget들을 가지고 있습니다
- Center Widget 내에서 한 줄 밑으로 내려 오신 후에 ch를 입력해서 Child Widget을 선택했습니다
    - 그리고 Child Widget 뒤에 col 이라고 입력해서 Center Widget의 대표적인 Child Widget인 Column Widget을 불러옵니다
    - 이 Column Widget은 자신의 Widget 내의 모든 요소들을 세로로 배치하는 기능을 가지고 있습니다
- 이 시점에서 논리적으로 잠시 생각해 보셔야 할 것이 Column Widget이 Child Widget을 가진다면 그것은 한화가 아닐 것입니다
    - 요소들을 세로로 배치해야 하기 때문에 하나만 달랑 배치 에서는 Column Widget은 의미가 없어지는 것이겠죠
    - 그래서 Column Widget 내에서 한 줄 밑으로 내려 오셔서 ch 라고 입력을 해보면 이렇게 child 가 아니라 children 이 보여주는 것입니다 선택을 해줍니다
- 이번에는 무언가 좀 복잡한 것이 나타나죠
코딩을 할 때 여기 끝에 Bracket 즉, 괄호는 배열을 의미하는 기호입니다
다시 말해서 이 괄호 안에 세로로 정렬될 Widget들을 나열하는 의미입니다
- 부디 일방적으로 올려서 기계적으로 사용을 하지 마시고 가급적 이렇게 논리적으로 코딩의 과정을 이해 보시기 바랍니다
- 그러면 괄호 안에 새로 배치될 Text Widget 3개를 넣어 보겠습니다
    - 우선 한줄 밑으로 내려 오셔서 Text Widget을 불러온 후에 작은 따옴표를 입력하시고 문자열은 Hello라고 씁니다
    - 그리고 Text Widget을 복사해서 붙여넣기를 하겠습니다.
    - 그런데 Text Widget 밑에 빨간 밑줄이 생기죠
    - Flutter에서는 한 Widget씩 끝나면 반드시 쉽표로 그 끝을 구분해야 합니다
    - 그렇지 않으면 이렇게 빨간 밑줄이 생기면서 오류가 납니다
    - 혹시라도 코드 있는 문제가 없는데 빨간 줄이 없어지지 않으면 Widget간의 쉼표가 잘 들어갔는지 꼭 확인해 보시기 바랍니다
- 이제 command s 를 눌러서 저장을 해 봅니다
에미레이터에 우리가 코딩한 내용들이 즉시 반영이 되죠
- 혹시라도 우리의 첫 번째 App 너무 볼품 없다고 실망 없었다면 전혀 그럴 필요는 없습니다
- 우리는 이제 그 어떤 기능과 디자인 이라도 우리 마음대로 넣을 수 있도록 기본 틀을 확실하게 만들었습니다
- 이제부터는 하나하나 여러분들이 원하는 기능들을 적용하기 위해서 플라타 를 학생들이 보다 더 즐거워질 것이라고 저는 확신합니다

---

### 마무리

- 어쩌면 매번 플랫폼 페이지를 만들 때마다 반드시 이 방식대로 코딩을 해야 한나 라는 의문이 들 수도 있습니다
- 당연히 기본 페이지를 만들기 위해서 매번 제가 설명드린 방법대로 코딩을 하실 필요는 없습니다
    - 가령 Material Widget를 불러오는 순간부터 Flutter FrameWork가 제공하는 모든 기본 Widget들을 불러와서 사용할 수 있기 때문에 Material Widget 내에서 곧바로 home 뒤에 이렇게 Scaffold Widget을 불러올 수 있습니다.
- home Widget이 반드시 필요한 이유는 App이 실행되면 제일 먼저 보여주는 경로이기 때문에 home Widget이 없으면 화면에 아무것도 나타나지 않습니다.
    - 그래서 MaterialApp Widget 내의  새로 만든 Scaffold Widget에서 좀 전에 우리가 했던 그대로 코딩을 해도 똑같은 결과를 볼 수 있습니다.
- 이제 하단부에 있는 Scaffold Widget 내용을 모두 복사한 후에 나머지는 지우고 복사한 내용을 home 뒤에 있는 Scaffold Widget 내에 붙여넣기를 해보겠습니다. 그리고 command s 를 누르면 똑같죠
- 그럼 이런 방법도 있는데 저는 왜 굳이 다른 방법으로 지금까지 설명을 드렸을까요
우리는 지금까지 아주 간단한 내용만을 코딩 했습니다
    - 그러나 웹페이지 수가 많아지고 App 기능들이 늘어날수록 그에 비례해서 코드에 양도 급격히 많아질 것입니다
    - 그래서 한 페이지에 길게 코딩을 하기 보다는 가독성과 효율성 그리고 유지보수의 간결성 등을 위해서 가급적 코드 구성상 체계적인 구분을 두면서 처음부터 코드는 코딩하는 습관을 만드셔야 합니다
        - 가령 MyHomePage Custom Widget 내용이 많아지면 이 Widget만 따로 떼어서 다른 페이지에 코딩을 한다든지 또는 main.dart file에 MyApp Custom Widget만을 남겨두고  그외 코드들은 각 기능에 맞게 페이지 이름으로 다른 dart file에 코딩을 할 수도 있을 것입니다
        - 그러면 한 페이지에 무한정 coding을 하는 것보다 추후에 유지 보수가 훨씬 쉬워 지겠죠
- 이런 차원에서 flutter 극초보 탈출을 위해서 App의 기본 페이지 구성을 이해하고 공식화 시켜서 논리적으로 암기를 해보는 것을 적극 추천드립니다